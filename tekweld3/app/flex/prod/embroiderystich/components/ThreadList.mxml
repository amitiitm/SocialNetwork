<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="426" height="202" xmlns:customcomponents="com.generic.customcomponents.*" verticalGap="3"
		 creationComplete="creationComplete()"
		 title="Threads" showCloseButton="true" close="closeHandler()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XML id="jobLineStructure" source="../xmls/ThreadListStr.xml"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import business.events.PreSaveEvent;
			import business.events.RecordStatusEvent;
			
			import com.adobe.cairngorm.business.ServiceLocator;
			import com.generic.genclass.URL;
			
			import model.GenModelLocator;
			
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.IResponder;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			public  var fileRef:FileReference = new FileReference();
			import saoi.muduleclasses.event.MissingInfoEvent;
			
			[Bindable]
			private var __genModel:GenModelLocator = GenModelLocator.getInstance();
			private var urlObj:URL	=	new URL();
			private var __service:ServiceLocator = __genModel.services;
			[Bindable]
			public var xml:XML= new XML();
			public var indigo_code:String= '';
			private var __generateIndigo:IResponder;
			
			private function getTransNo():String
			{
				var returnValue:String	= '';
				if(xml.children().length()>0)
				{
					returnValue =  xml.children()[0].trans_no.toString();
				}
				return returnValue;
			}
			private function creationComplete():void
			{
				getThreads();
			}
			
			private function closeHandler():void
			{
				PopUpManager.removePopUp(this);
			}
		
			public function dataService(service:HTTPService):HTTPService
			{
				var urlObj:URL				=	new URL();
				service.url					=	urlObj.getURL(service.url);
				service.resultFormat 		= 	"e4x";					
				service.method 				= 	"POST";
				service.useProxy			= 	false;
				service.contentType			=	"application/xml";
				service.requestTimeout	 	= 	1800
				
				return service;
			}
			
			private function getThreads():void
			{
				CursorManager.setBusyCursor();
				Application.application.enabled  = false;
				
				var trans_no:String   = getTransNo();
				if(trans_no!='')
				{
					var tempXml:XML							= new XML(				<params>
																						<trans_no>{trans_no}</trans_no>
																					</params>);
					var generateIndigo:HTTPService 			= dataService(__service.getHTTPService("getThreads"));
					__generateIndigo 						= new mx.rpc.Responder(getJobsResultHandler,getJobsFaultHandler);
					var token:AsyncToken 					= generateIndigo.send(tempXml);
					token.addResponder(__generateIndigo);
				}
				else
				{
					CursorManager.removeBusyCursor();
					Application.application.enabled  = true;
				}
			}
			private function getJobsResultHandler(event:ResultEvent):void
			{
				var recordxml:XML  		= XML(event.result);
				gdShippingMethod.rows	= recordxml;
				
				CursorManager.removeBusyCursor();
				Application.application.enabled = true;
			}
			public function getJobsFaultHandler(event:FaultEvent):void
			{
				Alert.show("Get Threads "+event.fault.faultDetail);
				
				CursorManager.removeBusyCursor();
				Application.application.enabled = true;
			}
		]]>
	</fx:Script>
	
	
	<mx:HBox width="100%" height="100%" verticalAlign="top"  verticalGap="0">
		
		<customcomponents:GenDataGrid id="gdShippingMethod" width="100%" height="100%" itemClick=""
									  itemFocusOut="" structure="{jobLineStructure}"/>
	</mx:HBox>
	
</mx:TitleWindow>
