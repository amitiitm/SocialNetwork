<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="400" verticalGap="0" xmlns:customcomponents="com.generic.customcomponents.*"
		 creationComplete="creationComplete()"
		 title="Accessories" showCloseButton="true" close="closeHandler()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import business.events.GetInformationEvent;
			import business.events.PreSaveEvent;
			
			import com.generic.events.GenDynamicComboBoxEvent;
			import com.generic.genclass.GenNumberFormatter;
			
			import flash.globalization.NumberFormatter;
			
			import flashx.textLayout.tlf_internal;
			
			import model.GenModelLocator;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.IResponder;
			import mx.rpc.Responder;
			
			import saoi.muduleclasses.TierPricingFunctions;
			import saoi.muduleclasses.event.MissingInfoEvent;
			
			[Bindable]
			public var xml:XML= new XML();
			
			[Bindable]
			private var __genModel:GenModelLocator = GenModelLocator.getInstance();
			
			[Embed("com/generic/assets/save.png")]
			private const saveButtonIcon:Class;
			
			[Embed("com/generic/assets/save_disabled.png")]
			private const save_disabledButtonIcon:Class;
			
			[Bindable]
			private var rowXml:XML 				= new XML();
			
			private var resultXmlFromItem:XML  	= new XML();
			private var append_flag:Boolean 	= true;
			
			private function creationComplete():void
			{
				dcItemId.filterKeyValue	 = xml.children()[0].toString();
				
				var target:String		 = xml.children()[1].toString();
				rowXml		 			 = XML(xml.children()[2]);
				
				if(rowXml==null)
				{
					rowXml				 =  new XML(<sales_quotation_line_charge></sales_quotation_line_charge>);
					append_flag		 	 =  true;	
				}
				else
				{
					rowXml				 = XML(rowXml.children()[0]).copy();
					append_flag		 	 = false;	
				}
				
				if(target.toString()=='dgItemAccessories') // retrieve
				{
					tiItemId.dataValue			=  rowXml.id.toString();
					dcItemId.dataValue 			=  rowXml.catalog_item_id.toString();
					dcItemId.labelValue 		=  rowXml.catalog_item_code.toString();
					tiItemQty.dataValue			=  rowXml.item_qty.toString();
					tiItemPrice.dataValue		=  rowXml.item_price.toString();
					tiAmount.dataValue      	=  rowXml.item_amt.toString();
					taItemDescription.dataValue	=  rowXml.item_description.toString();
					tiType.dataValue			=  rowXml.item_type.toString();
					cbTrans_flag.dataValue		=  rowXml.trans_flag.toString();
					
					getItemDetailsAfterSave();
				}
				else  // reset
				{
					tiItemId.dataValue			=  tiItemId.defaultValue;
					dcItemId.dataValue 			=  dcItemId.defaultDataValue;
					dcItemId.labelValue 		=  dcItemId.defaultLabelValue;
					tiItemQty.dataValue			=  tiItemQty.defaultValue;
					tiItemPrice.dataValue		=  tiItemPrice.defaultValue;
					tiAmount.dataValue      	=  tiAmount.defaultValue;
					taItemDescription.dataValue	=  taItemDescription.defaultValue;
					tiType.dataValue			=  tiType.defaultValue;
					cbTrans_flag.dataValue		=  cbTrans_flag.defaultValue;
				}
			}
			
			private function getItemDetails():void
			{
				if(dcItemId.dataValue != '' && dcItemId.dataValue != null)
				{
					var callbacks:IResponder					=	new mx.rpc.Responder(itemsResultHandler,null)
					var getInformationEvent:GetInformationEvent	=	new GetInformationEvent('accessories_item_detail',callbacks,dcItemId.dataValue)
					getInformationEvent.dispatch();
				}
			}
			
			private function itemsResultHandler(resultXml:XML):void
			{
				resultXmlFromItem 					= 	resultXml;
				taItemDescription.dataValue 		=	resultXml.description.toString();
				tiType.dataValue					=   resultXml.item_type.toString();
				tiImage_thumnail.dataValue 			=	resultXml.image_thumnail.toString();
				cbUnit.dataValue					=   resultXml.unit.toString();
				setItemCost();
			}
			private function getItemDetailsAfterSave():void
			{
				if(dcItemId.dataValue != '' && dcItemId.dataValue != null)
				{
					var callbacks:IResponder					=	new mx.rpc.Responder(itemsResultHandlerAfterSave,null)
					var getInformationEvent:GetInformationEvent	=	new GetInformationEvent('accessories_item_detail',callbacks,dcItemId.dataValue)
					getInformationEvent.dispatch();
				}
			}
			
			private function itemsResultHandlerAfterSave(resultXml:XML):void
			{
				resultXmlFromItem 					= 	resultXml;
			}
			
			private function closeHandler():void
			{
				PopUpManager.removePopUp(this);
			}
			private function saveClickHandler():void
			{
				if(__genModel.isLockScreen)
				{
					Alert.show('In Progrss ! please try again');
				}
				else
				{
					if(dcItemId.dataValue =='')
					{
						Alert.show("Please Select Item Code");
					}
					else
					{
						
						
						rowXml.catalog_item_id 			= dcItemId.dataValue;
						rowXml.catalog_item_code    	= dcItemId.labelValue;
						rowXml.id						= tiItemId.dataValue;
						rowXml.item_description			= taItemDescription.dataValue;
						rowXml.item_qty					= tiItemQty.dataValue;
						rowXml.item_price				= tiItemPrice.dataValue;
						rowXml.item_amt					= tiAmount.dataValue;
						rowXml.item_type				= tiType.dataValue;
						rowXml.trans_flag				= cbTrans_flag.dataValue;
						var tempXml:XML					= new XML(<rows>
																							<row>{append_flag.toString()}</row>
																							<row>{rowXml}</row>
																					   </rows>);
						
						dispatchEvent(new MissingInfoEvent(MissingInfoEvent.MissingInfoEvent_Type,tempXml));
						closeHandler();
					}
				}
				
			}
			
			private function setItemCost():void
			{
				
				var index:int 				= new TierPricingFunctions().getColumnSize(resultXmlFromItem.columns,Number(tiItemQty.dataValue));
				tiItemPrice.dataValue  		= new TierPricingFunctions().returnColumnPrice(resultXmlFromItem.catalog_item_prices.catalog_item_price,index);
				
				var numberFormatter:GenNumberFormatter = new GenNumberFormatter();
				numberFormatter.precision  = 2;
				tiAmount.dataValue  = numberFormatter.format(Number(tiItemPrice.dataValue)*Number(tiItemQty.dataValue));
			}
			/* private function  getColumnSize(columnXml:XMLList,size:int):int
			{
				
				var index:int=10;
				if(size<=Number(columnXml.column1.toString()))
				{
					index = 1;
				}
				else if(size<=Number(columnXml.column2.toString()) && size>Number(columnXml.column1.toString()))
				{
					index = 2;
				}
				else if(size<=Number(columnXml.column3.toString()) && size>Number(columnXml.column2.toString()))
				{
					index = 3;
				}
				else if(size<=Number(columnXml.column4.toString()) && size>Number(columnXml.column3.toString()))
				{
					index = 4;
				}
				else if(size<=Number(columnXml.column5.toString()) && size>Number(columnXml.column4.toString()))
				{
					index = 5;
				}
				else if(size<=Number(columnXml.column6.toString()) && size>Number(columnXml.column5.toString()))
				{
					index = 6;
				}
				else if(size<=Number(columnXml.column7.toString()) && size>Number(columnXml.column6.toString()))
				{
					index = 7;
				}
				else if(size<=Number(columnXml.column8.toString()) && size>Number(columnXml.column7.toString()))
				{
					index = 8;
				}
				else if(size<=Number(columnXml.column9.toString()) && size>Number(columnXml.column8.toString()))
				{
					index = 9;
				}
				else if(size<=Number(columnXml.column10.toString()) && size>Number(columnXml.column9.toString()))
				{
					index = 10;
				}
				return index;
				
				
			}
			
			private function returnColumnPrice(column_pricing:XMLList,index:int):String
			{
				var price:String = column_pricing.column10.toString();
				if(index==1)
				{
					price =  column_pricing.column1.toString();
				}
				else if(index==2)
				{
					price =  column_pricing.column2.toString();
				}
				else if(index==3)
				{
					price =  column_pricing.column3.toString();
				}
				else if(index==4)
				{
					price =  column_pricing.column4.toString();
				}
				else if(index==5)
				{
					price =  column_pricing.column5.toString();
				}
				else if(index==6)
				{
					price =  column_pricing.column6.toString();
				}
				else if(index==7)
				{
					price =  column_pricing.column7.toString();
				}
				else if(index==8)
				{
					price =  column_pricing.column8.toString();
				}
				else if(index==9)
				{
					price =  column_pricing.column9.toString();
				}
				else if(index==10)
				{
					price =  column_pricing.column10.toString();
				}
				return price;
			} */
			
		]]>
	</fx:Script>
	<mx:VBox height="100%" width="100%" >	
		<mx:HBox verticalAlign="middle" >
			<customcomponents:GenButton	id="btnEdit" 
										icon="{saveButtonIcon}"
										disabledIcon="{save_disabledButtonIcon}"
										color="#D2C5EB"
										height="25" 
										width="25" 
										toolTip="Edit"
										cornerRadius="0"
										click="saveClickHandler()" />
		</mx:HBox>
		<mx:VBox height="100%" width="100%">
			
			
			
			<mx:HBox>
				<mx:Label text=" Accessory Item #" width="114" textAlign="right"/>
				<!--<customcomponents:GenDynamicComboBox id="dcItemId" width="150" height="20"
													 tabIndex="1" toolTip="Item #" 
													 dataField="accessory_item_id" itemChangedEvent="getItemDetails()"
													 labelField="catalog_item_code" 
													 validationFlag="true" xmlTag="catalog_item_id" updatableFlag="true" tableName="sales_quotation_line_charge" />
				-->
				<customcomponents:GenTextInputWithHelp
					lookupFormatUrl	=  "itemLookupHelpFormat"
					id="dcItemId" 
					width="150" 
					toolTip="Item #" 
					dataSourceName="ItemSpecificAccessoriesItem"
					height="20" 
					tabIndex="1" 
					validationFlag="true" 
					xmlTag="catalog_item_id"
					labelTag="catalog_item_code"
					dataField="id" 
					labelField= "store_code"
					updatableFlag="true" 
					filterEnabled="true" filterKeyName="catalog_item_id"
					tableName="sales_quotation_line_charge" 
					itemChangedEvent="getItemDetails()"
					/>
				<customcomponents:GenTextInput id="tiItemId" width="0" height="0" includeInLayout="false" visible="false"
											   xmlTag="id" updatableFlag="true" tabIndex="3" maxChars="100" defaultValue=""
											   tableName="sales_quotation_line_charge" />
				<mx:Label text="Unit" width="52" textAlign="right"/>
				<customcomponents:GenComboBox id="cbUnit" width="110" cornerRadius="0" xmlTag="unit" updatableFlag="true"
											  tableName="sales_quotation_line_charge" defaultValue="Pcs" labelField="label" tabIndex="207"
											  dataProvider="{__genModel.masterData.child('sell_unit').sell_unit}" height="20" enabled="false"/>
				
			</mx:HBox>
			
			<mx:HBox>
				<mx:Label text="Quantity" width="114" textAlign="right"/>
				<customcomponents:GenTextInput id="tiItemQty" width="58" height="20" dataType="N"
											   defaultValue="1" enabled="false"
											   itemChangedEvent="setItemCost()" maxChars="100"
											   maxValue="9999999999" setDefaultOnEmpty="true"
											   tabIndex="3" tableName="sales_quotation_line_charge"
											   textAlign="right" updatableFlag="true"
											   xmlTag="item_qty"/>
				
				<mx:Label text="price" width="145" textAlign="right"/>
				<customcomponents:GenTextInput id="tiItemPrice" width="109" height="20" enabled="false"
											   xmlTag="item_price" updatableFlag="true" tabIndex="3" maxChars="100" defaultValue="0.000" dataType="N" setDefaultOnEmpty="true" maxValue="9999999999.999"
											   tableName="sales_quotation_line_charge" />
			</mx:HBox>
			<mx:HBox includeInLayout="false" height="0" width="0" visible="false">
				<mx:Label text="Type" width="95" textAlign="right"/>
				<customcomponents:GenTextInput id="tiType" width="55" height="20" visible="true" editable="false"
											   enabled="true" xmlTag="item_type" updatableFlag="true"
											   tableName="sales_quotation_line_charge"  tabIndex="4" toolTip="Type" setDefaultOnEmpty="true" 
											   textAlign="right" defaultValue="C"/>
				<customcomponents:GenTextInput id="tiLineType" width="55" height="20" visible="true" editable="false"
											   enabled="true" xmlTag="line_type" updatableFlag="true"
											   tableName="sales_quotation_line_charge"  tabIndex="4" toolTip="Type" setDefaultOnEmpty="true" 
											   textAlign="right" defaultValue="S"/>	
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Amount" width="114" textAlign="right"/>
				<customcomponents:GenTextInput id="tiAmount" width="80" height="20" visible="true" enabled="false"
											   xmlTag="item_amt" updatableFlag="true" tabIndex="5"
											   tableName="sales_quotation_line_charge" defaultValue="0.00"  toolTip="Price" setDefaultOnEmpty="true" 
											   textAlign="right" dataType="N" maxValue="9999999999.99" />
			</mx:HBox>
			
			<mx:HBox>
				<mx:Label text="Description" width="114" textAlign="right"/>
				<customcomponents:GenTextInput id="taItemDescription" width="295" height="40"
											   xmlTag="item_description" updatableFlag="true" tabIndex="3" maxChars="100"
											   tableName="sales_quotation_line_charge" />
			</mx:HBox>
			
			<mx:HBox height="0" width="0" visible="false">
				<mx:HBox>
					<mx:Label text="Status" width="0" height="0" textAlign="right"/>
					<customcomponents:GenComboBox id="cbTrans_flag" width="0" height="0" cornerRadius="0" xmlTag="trans_flag" updatableFlag="true"
												  tableName="sales_quotation_line_charge"  labelField="label" defaultValue="A" dataProvider="{__genModel.masterData.child('trans_flag').trans_flag}" />
				</mx:HBox>
				<customcomponents:GenTextInput id="tiTrans_bk" width="0" height="0" visible="true"
											   editable="true" enabled="true" xmlTag="trans_bk" updatableFlag="true"
											   tableName="sales_quotation_line_charge" defaultValue=""/>
				<customcomponents:GenTextInput id="tiTrans_no" width="0" height="0" visible="true"
											   editable="true" enabled="true" xmlTag="trans_no" updatableFlag="true"
											   tableName="sales_quotation_line_charge" defaultValue=""/>
				<customcomponents:GenDateField id="dfTrans_date" width="0" xmlTag="trans_date"
											   updatableFlag="true" tableName="sales_quotation_line_charge" defaultValue="" 
											   validationFlag="false" toolTip="Ref Trans Dt"/>
				<customcomponents:GenTextInput id="tiSerial_no" width="0" height="0" visible="true"
											   editable="true" enabled="true" xmlTag="serial_no" updatableFlag="true"
											   tableName="sales_quotation_line_charge" defaultValue=""  />
				<customcomponents:GenTextInput id="tiImage_thumnail" width="0" height="0" visible="false"
											   editable="false" enabled="true" xmlTag="image_thumnail" updatableFlag="true"
											   tableName="sales_quotation_line_charge" defaultValue="" />
			</mx:HBox>
			
			<mx:VBox width="120" height="120">
				<mx:Image id="itemImage" 
						  width="100%"
						  height="100%" 
						  verticalAlign="middle" 
						  horizontalAlign="center" 
						  source="{__genModel.path.image}{tiImage_thumnail.text}"/>
			</mx:VBox>
		</mx:VBox>
		<mx:HBox width="100%" height="45" verticalAlign="middle"  verticalGap="0">
			<s:Spacer width="146"/>
			<!--<s:Button label="Save" click="saveClickHandler()"/>
			<s:Button label="Cancel" click="closeHandler()" />-->
		</mx:HBox>
		
	</mx:VBox>
</mx:TitleWindow>
